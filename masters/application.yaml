apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: elastic-masters
  namespace: system
spec:  
  version: 8.6.0  
  nodeSets:
  - name: master-b
    count: 1
    config:
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "master" ]              
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c8-r16       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 16Gi
              cpu: '8'
            limits:
              memory: 16Gi
              cpu: '8' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
  - name: master-c
    count: 1
    config:
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "master" ]              
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c8-r16
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 16Gi
              cpu: '8'
            limits:
              memory: 16Gi
              cpu: '8' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']          
  - name: hot-b
    count: 1
    config:
      node.attr.data: hot      
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_hot", "data_content" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']    
  - name: hot-c
    count: 1
    config:
      node.attr.data: hot      
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_hot", "data_content" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']                     
  - name: warm-b
    count: 1
    config:
      node.attr.data: warm      
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_warm" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: warm                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r4       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 4Gi
              cpu: '4'
            limits:
              memory: 4Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']         
  - name: warm-c
    count: 1
    config:
      node.attr.data: warm      
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_warm" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: warm                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r4       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 4Gi
              cpu: '4'
            limits:
              memory: 4Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']                  
  - name: cold-b
    count: 1
    config:
      node.attr.data: cold      
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_cold" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: cold                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r4       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 4Gi
              cpu: '4'
            limits:
              memory: 4Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']        
  - name: cold-c
    count: 1
    config:
      node.attr.data: cold      
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "data_cold" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: cold                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r4       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 4Gi
              cpu: '4'
            limits:
              memory: 4Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']                  
  - name: ingest-b
    count: 1
    config:
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "ingest" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
  - name: ingest-c
    count: 1
    config:
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "ingest" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']          
  - name: coordinate-b
    count: 1
    config:
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: []
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
  - name: coordinate-c
    count: 1
    config:
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: []
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c4-r8       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 8Gi
              cpu: '4'
            limits:
              memory: 8Gi
              cpu: '4' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']          
  - name: transform-b
    count: 1
    config:
      node.attr.zone: europe-west1-b
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "transform" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c8-r16       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 16Gi
              cpu: '8'
            limits:
              memory: 16Gi
              cpu: '8' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']         
  - name: transform-c
    count: 1
    config:
      node.attr.zone: europe-west1-c
      cluster.routing.allocation.awareness.attributes: zone
      node.roles: [ "transform" ]
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: hot                    
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: n-c8-r16       
        containers:
        - name: elasticsearch
          resources:
            requests:
              memory: 16Gi
              cpu: '8'
            limits:
              memory: 16Gi
              cpu: '8' 
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']                              
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana
  namespace: system
spec:
  version: 8.6.0
  count: 1
  elasticsearchRef:
    name: elastic-masters
  config:
    xpack.fleet.agents.elasticsearch.hosts: ["https://elastic-masters-es-http.system.svc:9200"]
    xpack.fleet.agents.fleet_server.hosts: ["https://fleet-server-agent-http.system.svc:8220"]
    monitoring.ui.ccs.enabled: false
    xpack.fleet.packages:
      - name: system
        version: latest
      - name: elastic_agent
        version: latest
      - name: fleet_server
        version: latest
    xpack.fleet.agentPolicies:
      - name: Fleet Server on ECK policy
        id: eck-fleet-server
        is_default_fleet_server: true
        namespace: system
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        package_policies:
        - name: fleet_server-1
          id: fleet_server-1
          package:
            name: fleet_server
      - name: Elastic Agent on ECK policy
        id: eck-agent
        namespace: system
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        is_default: true
        package_policies:
          - name: system-1
            id: system-1
            package:
              name: system
  podTemplate:
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: n-c8-r16       
      containers:
      - name: kibana
        resources:
          requests:
            memory: 16Gi
            cpu: '8'
          limits:
            memory: 16Gi
            cpu: '8' 
      initContainers:
      - name: sysctl
        securityContext:
          privileged: true
          runAsUser: 0
        command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']            
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server
  namespace: system  
spec:
  version: 8.6.0
  kibanaRef:
    name: kibana
  elasticsearchRefs:
  - name: elastic-masters
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: fleet-server
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata: 
  name: elastic-agent
  namespace: system  
spec:
  version: 8.6.0
  kibanaRef:
    name: kibana
  fleetServerRef: 
    name: fleet-server
  mode: fleet
  daemonSet:
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        hostNetwork: true
        dnsPolicy: ClusterFirstWithHostNet
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
        containers:
        - name: agent
          resources:
            requests:
              memory: 256Mi
              cpu: 0.1
            limits:
              memory: 256Mi
              cpu: 0.1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-server
rules:
- apiGroups: [""]
  resources:
  - pods
  - namespaces
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-server
  namespace: system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-server
subjects:
- kind: ServiceAccount
  name: fleet-server
  namespace: system
roleRef:
  kind: ClusterRole
  name: fleet-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
rules:
- apiGroups: [""]
  resources:
  - pods
  - nodes
  - namespaces
  - events
  - services
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
- nonResourceURLs:
  - "/metrics"
  verbs:
  - get
- apiGroups: ["extensions"]
  resources:
    - replicasets
  verbs: 
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "apps"
  resources:
  - statefulsets
  - deployments
  - replicasets
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - ""
  resources:
  - nodes/stats
  verbs:
  - get
- apiGroups:
  - "batch"
  resources:
  - jobs
  verbs:
  - "get"
  - "list"
  - "watch"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  namespace: system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent
subjects:
- kind: ServiceAccount
  name: elastic-agent
  namespace: system
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: system
  labels:
    k8s-app: filebeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
    - jobs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat
  # should be the namespace where filebeat is running
  namespace: system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat-kubeadm-config
  namespace: system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat
  namespace: system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: system
roleRef:
  kind: Role
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat-kubeadm-config
  namespace: system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: system
roleRef:
  kind: Role
  name: filebeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: system
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    filebeat.inputs:
    - type: container
      paths:
        - /var/log/containers/*.log
      processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"

    # To enable hints based autodiscover, remove `filebeat.inputs` configuration and uncomment this:
    #filebeat.autodiscover:
    #  providers:
    #    - type: kubernetes
    #      node: ${NODE_NAME}
    #      hints.enabled: true
    #      hints.default_config:
    #        type: container
    #        paths:
    #          - /var/log/containers/*${data.kubernetes.container.id}.log

    processors:
      - add_cloud_metadata:
      - add_host_metadata:

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: system
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.6.0
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_HOST
          value: elastic-masters-es-http.system.svc
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTICSEARCH_PASSWORD
          value: 69Eg578U9edG9rz8X2CQc1pX
        - name: ELASTIC_CLOUD_ID
          value:
        - name: ELASTIC_CLOUD_AUTH
          value:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---
