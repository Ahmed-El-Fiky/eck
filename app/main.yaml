apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: elastic-masters
  namespace: elasticsearch
spec:
  version: 8.16.0
  nodeSets:
    # Master nodes with corrected affinity and labels
    - name: master
      count: 3  # Set to the desired number of replicas
      config:
        node.roles: ["master"]
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        spec:
          nodeSelector:
            cloud.google.com/gke-nodepool: eck-poolv2  # Ensure node pool spans multiple zones
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      elasticsearch.k8s.elastic.co/cluster-name: elastic-masters
                      elasticsearch.k8s.elastic.co/node-master: "true"
                  topologyKey: topology.kubernetes.io/zone  # Ensures pods are distributed across different zones
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 16Gi
                  cpu: '8'
                limits:
                  memory: 16Gi
                  cpu: '8'
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Data nodes with corrected affinity and labels
    - name: data
      count: 2  # Number of data nodes, adjust as needed
      config:
        node.roles: ["data"]
        cluster.routing.allocation.awareness.attributes: zone
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 12Ti
            storageClassName: standard
      podTemplate:
        spec:
          nodeSelector:
            cloud.google.com/gke-nodepool: eck-poolv2
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      elasticsearch.k8s.elastic.co/cluster-name: elastic-masters
                      elasticsearch.k8s.elastic.co/node-data: "true"
                  topologyKey: topology.kubernetes.io/zone
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 16Gi
                  cpu: '8'
                limits:
                  memory: 16Gi
                  cpu: '8'
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Ingest nodes with corrected affinity and labels
    - name: ingest
      count: 2  # Number of ingest nodes, adjust as needed
      config:
        node.roles: ["ingest"]
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        spec:
          nodeSelector:
            cloud.google.com/gke-nodepool: eck-poolv2
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      elasticsearch.k8s.elastic.co/cluster-name: elastic-masters
                      elasticsearch.k8s.elastic.co/node-ingest: "true"
                  topologyKey: topology.kubernetes.io/zone
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 16Gi
                  cpu: '8'
                limits:
                  memory: 16Gi
                  cpu: '8'
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Coordinating nodes with corrected affinity and labels
    - name: coordinate
      count: 2  # Number of coordinating nodes, adjust as needed
      config:
        node.roles: []
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        spec:
          nodeSelector:
            cloud.google.com/gke-nodepool: eck-poolv2
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      elasticsearch.k8s.elastic.co/cluster-name: elastic-masters
                      elasticsearch.k8s.elastic.co/node-master: "false"
                      elasticsearch.k8s.elastic.co/node-data: "false"
                      elasticsearch.k8s.elastic.co/node-ingest: "false"
                      elasticsearch.k8s.elastic.co/node-transform: "false"
                  topologyKey: topology.kubernetes.io/zone
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 16Gi
                  cpu: '8'
                limits:
                  memory: 16Gi
                  cpu: '8'
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']

    # Transform nodes with corrected affinity and labels
    - name: transform
      count: 2  # Number of transform nodes, adjust as needed
      config:
        node.roles: ["transform"]
        cluster.routing.allocation.awareness.attributes: zone
      podTemplate:
        spec:
          nodeSelector:
            cloud.google.com/gke-nodepool: eck-poolv2
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      elasticsearch.k8s.elastic.co/cluster-name: elastic-masters
                      elasticsearch.k8s.elastic.co/node-transform: "true"
                  topologyKey: topology.kubernetes.io/zone
          containers:
            - name: elasticsearch
              resources:
                requests:
                  memory: 16Gi
                  cpu: '8'
                limits:
                  memory: 16Gi
                  cpu: '8'
          initContainers:
            - name: sysctl
              securityContext:
                privileged: true
                runAsUser: 0
              command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  name: kibana
  namespace: elasticsearch
spec:
  version: 8.16.0
  count: 2  # Number of Kibana instances, adjust as needed
  elasticsearchRef:
    name: elastic-masters
    namespace: elasticsearch
  http:
    service:
      metadata:
        annotations:
          cloud.google.com/load-balancer-type: External
      spec:
        type: LoadBalancer
  podTemplate:
    spec:
      nodeSelector:
        cloud.google.com/gke-nodepool: eck-poolv2
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: kibana
              topologyKey: topology.kubernetes.io/zone
      containers:
        - name: kibana
          resources:
            requests:
              memory: 16Gi
              cpu: '8'
            limits:
              memory: 16Gi
              cpu: '8'
      initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server
  namespace: elasticsearch
spec:
  version: 8.16.0
  kibanaRef:
    name: kibana
    namespace: elasticsearch
  elasticsearchRefs:
    - name: elastic-masters
      namespace: elasticsearch
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 2  # Number of Fleet Server instances, adjust as needed
    podTemplate:
      spec:
        nodeSelector:
          cloud.google.com/gke-nodepool: eck-poolv2
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    app: fleet-server
                topologyKey: topology.kubernetes.io/zone
        serviceAccountName: fleet-server
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
        containers:
          - name: agent
            resources:
              requests:
                memory: 16Gi
                cpu: '8'
              limits:
                memory: 16Gi
                cpu: '8'
        initContainers:
          - name: sysctl
            securityContext:
              privileged: true
              runAsUser: 0
            command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: elastic-agent
  namespace: elasticsearch
spec:
  version: 8.16.0
  fleetServerRef:
    name: fleet-server
    namespace: elasticsearch
  mode: fleet
  daemonSet:
    podTemplate:
      spec:
        tolerations:
          - key: node-role.kubernetes.io/master
            effect: NoSchedule
          - key: node-role.kubernetes.io/control-plane
            effect: NoSchedule
          - operator: Exists
            effect: NoExecute
        serviceAccountName: elastic-agent
        hostNetwork: true
        dnsPolicy: ClusterFirstWithHostNet
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
        containers:
          - name: agent
            resources:
              requests:
                memory: 16Gi
                cpu: '8'
              limits:
                memory: 16Gi
                cpu: '8'
            volumeMounts:
              - name: gcp-credentials
                mountPath: /usr/share/elastic-agent/gcp
                readOnly: true
        volumes:
          - name: gcp-credentials
            secret:
              secretName: gcp-credentials
        initContainers:
          - name: sysctl
            securityContext:
              privileged: true
              runAsUser: 0
            command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
---
# Fleet Server RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-server
rules:
  - apiGroups: [""]
    resources:
      - pods
      - namespaces
      - nodes
    verbs:
      - get
      - watch
      - list
  - apiGroups: ["coordination.k8s.io"]
    resources:
      - leases
    verbs:
      - get
      - create
      - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-server
  namespace: elasticsearch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-server
subjects:
  - kind: ServiceAccount
    name: fleet-server
    namespace: elasticsearch
roleRef:
  kind: ClusterRole
  name: fleet-server
  apiGroup: rbac.authorization.k8s.io
---
# Elastic Agent RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - nodes
      - nodes/metrics
      - nodes/proxy
      - nodes/stats
      - events
    verbs:
      - get
      - watch
      - list
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
      - watch
      - list
  - apiGroups: ["coordination.k8s.io"]
    resources:
      - leases
    verbs:
      - get
      - create
      - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  namespace: elasticsearch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent
subjects:
  - kind: ServiceAccount
    name: elastic-agent
    namespace: elasticsearch
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
